package com.algorithm.tree;

/**
 * @author jianzhen.yin
 * @date 2020/12/7
 */
public class RedBlackTree {
    /**
     * 红黑树是一种平衡二叉查找树。它是为了解决普通二叉查找树在数据更新的过程中，复杂度退化的问题而产生的。红黑树的高度近似 log2n，
     * 所以它是近似平衡，插入、删除、查找操作的时间复杂度都是 O(logn)。因为红黑树是一种性能非常稳定的二叉查找树，
     * 所以，在工程中，但凡是用到动态插入、删除、查找数据的场景，都可以用到它。不过，它实现起来比较复杂，如果自己写代码实现，难度会有些高，这个时候，我们其实更倾向用跳表来替代它
     *
     * 定义：
     * 1。根节点是黑色的；
     * 2。每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；
     * 3。任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；
     * 4。每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；
     * @param args
     */
    public static void main(String[] args) {

    }
}
